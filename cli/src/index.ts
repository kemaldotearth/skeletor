#!/usr/bin/env node
import { Command } from 'commander';
// import * as chalkAnimation from 'chalk-animation';
import * as fs from 'fs';
// import { promiseResolve } from './utils/helpers';
import { updateSpinnerText, spinnerSuccess } from './utils/spinners';

const program = new Command();

program.description(
  'A simple CLI tool for generating front end design system packages.',
);
program.option('--verbose', 'Verbose logging.');
program.version('0.1.0', '-v, --version', 'Logs current version.');

program.command('generate:tokens').action(async () => {
  updateSpinnerText('Generating tokens...');
  // await promiseResolve(3000);
  await new Promise((resolve) => setTimeout(resolve, 3000));

  spinnerSuccess();
  console.log('wow your tokens!');
});

program
  .command('generate:ui')
  .option('--with-tailwind', 'Adds Tailwind CSS to your package.')
  .action(async () => {
    updateSpinnerText('Generating UI...');
    // await promiseResolve(3000);
    await new Promise((resolve) => setTimeout(resolve, 3000));

    const libName = 'skeletor-ui';
    const includeTailwind = program.opts().withTailwind;

    // 1. Create a directory for the package
    console.log('Creating directory...');
    fs.mkdirSync(libName);

    // 2. Create a package.json file
    console.log('Scaffolding package.json...');
    fs.writeFileSync(
      `${libName}/package.json`,
      JSON.stringify(
        {
          name: libName,
          version: '0.1.0',
          description: 'A simple UI library generated by Skeletor.',
          main: 'dist/cjs/index.js',
          module: 'dist/esm/index.js',
          files: ['dist'],
          types: './dist/index.d.ts',
          scripts: {
            build:
              'rimraf dist && tsc --emitDeclarationOnly && NODE_ENV=production rollup --config',
            tsc: 'tsc',
          },
          author: 'skeletor-cli',
          license: 'UNLICENSED',
          devDependencies: {
            '@babel/core': '^7.14.3',
            '@babel/preset-env': '^7.14.2',
            '@babel/preset-react': '^7.13.13',
            '@rollup/plugin-babel': '^5.3.0',
            '@rollup/plugin-commonjs': '^17.1.0',
            '@rollup/plugin-node-resolve': '^11.2.1',
            '@rollup/plugin-typescript': '^8.2.1',
            '@types/react': '^17.0.3',
            '@types/react-dom': '^17.0.3',
            'babel-loader': '^8.2.2',
            react: '^18.2.0',
            'react-dom': '^18.2.0',
            typescript: '^4.3.5',
            rimraf: '^3.0.2',
            rollup: '^2.52.1',
            'rollup-plugin-peer-deps-external': '^2.2.4',
            'rollup-plugin-dts': '^3.0.1',
            webpack: '^5.52.1',
            ...includeTailwind({
              tailwindcss: '^2.2.19',
              postcss: '^8.3.11',
              autoprefixer: '^10.3.7',
              'rollup-plugin-postcss': '^4.0.0',
            }),
          },
        },
        null,
        2,
      ),
    );

    // 3. Create a tsconfig.json file
    console.log('Adding tsconfig.json...');
    fs.writeFileSync(
      `${libName}/tsconfig.json`,
      JSON.stringify(
        {
          compilerOptions: {
            target: 'es5',
            jsx: 'react',
            module: 'esnext',
            rootDir: './src',
            lib: ['es6', 'dom', 'es2016', 'es2017'],
            moduleResolution: 'node',
            resolveJsonModule: true,
            allowJs: false,
            declaration: true,
            declarationDir: 'types',
            sourceMap: true,
            outDir: './dist',
            allowSyntheticDefaultImports: true,
            esModuleInterop: true,
            forceConsistentCasingInFileNames: true,
            strict: true,
            skipLibCheck: true,
            emitDeclarationOnly: true,
          },
          include: ['src/**/*'],
          exclude: ['node_modules', 'dist'],
        },
        null,
        2,
      ),
    );

    // 4. Create a src directory
    console.log('Creating directories...');
    fs.mkdirSync(`${libName}/src`);
    fs.mkdirSync(`${libName}/src/components`);
    fs.mkdirSync(`${libName}/src/components/Button`);

    // 5. Create an index.ts file
    console.log('Adding index.ts and first component...');
    fs.writeFileSync(
      `${libName}/src/index.ts`,
      `export { default as Button, ButtonProps } from './components/Button/index.tsx';`,
    );
    fs.writeFileSync(
      `${libName}/src/components/Button/index.tsx`,
      `
      import React from 'react';

      export interface ButtonProps {
        label: string;
      }

      export const Button = ({ label }: ButtonProps) => {
        return (
          <button>{label}</button>
        );
      };
    `,
    );

    // 6. Create a rollup.config.js file
    console.log('Adding rollup.config.js...');
    fs.writeFileSync(
      `${libName}/rollup.config.js`,
      `
      import resolve from '@rollup/plugin-node-resolve';
      import commonjs from '@rollup/plugin-commonjs';
      import external from 'rollup-plugin-peer-deps-external';
      import typescript from '@rollup/plugin-typescript';
      import dts from 'rollup-plugin-dts';
      import babel from '@rollup/plugin-babel';
      import pkg from './package.json';
      ${includeTailwind('import postcss from "rollup-plugin-postcss";')}

      export default [
        {
          input: ['src/index.ts'],
          output: [
            {
              file: pkg.main,
              format: 'cjs',
              sourcemap: true,
              name: 'react-ts-lib',
            },
            {
              file: pkg.module,
              format: 'esm',
              sourcemap: true,
            },
          ],
          plugins: [
            babel({
              babelHelpers: 'bundled',
            }),
            external(),
            resolve(),
            commonjs(),
            typescript({
              tsconfig: './tsconfig.json',
            }),
          ],
          external: ['react', 'react-dom'],
        },
        {
          input: 'dist/esm/types/index.d.ts',
          output: [
            {
              file: 'dist/index.d.ts',
              format: 'esm',
            },
          ],
          external: [/\.css$/],
          plugins: [dts()],
        },
      ];`,
    );

    // 7. Create a README.md file
    console.log('Adding a README...');
    fs.writeFileSync(
      `${libName}/README.md`,
      `# ${libName}

      A simple UI library generated by Skeletor. ðŸ’€`,
    );

    // 8. Create a dot files
    console.log('Adding a few extras...');
    fs.writeFileSync(`${libName}/.gitignore`, 'node_modules');
    fs.writeFileSync(
      `${libName}/.babelrc`,
      `
      {
        "presets": ["@babel/preset-env", "@babel/preset-react"]
      }
    `,
    );

    console.log('Package generated! ðŸŽ‰');

    updateSpinnerText(`cd ${libName} && npm install`);
    spinnerSuccess();
  });

const run = async () => {
  await program.parseAsync();
};

run();

process.on('unhandledRejection', function (err: Error) {
  const debug = program.opts().verbose;

  if (debug) {
    console.error(err.stack);
  }

  program.error('', { exitCode: 1 });
});
