#!/usr/bin/env node
import { Command } from 'commander';
// import * as chalkAnimation from 'chalk-animation';
import * as fs from 'fs';
// import { promiseResolve } from './utils/helpers';
import { updateSpinnerText, spinnerSuccess } from './utils/spinners';

const program = new Command();

program.description(
  'A simple CLI tool for generating front end design system packages.',
);
program.option('--verbose', 'Verbose logging.');
program.version('0.1.0', '-v, --version', 'Logs current version.');

program.command('generate:tokens').action(async () => {
  updateSpinnerText('Generating tokens...');
  // await promiseResolve(3000);
  await new Promise((resolve) => setTimeout(resolve, 3000));

  spinnerSuccess();
  console.log('wow your tokens!');
});

program
  .command('generate:ui')
  .option('--name -n', 'Name of the package.')
  .action(async () => {
    updateSpinnerText('Generating UI...');
    // await promiseResolve(3000);
    await new Promise((resolve) => setTimeout(resolve, 3000));

    const libName = 'skeletor-ui';

    // 1. Create a directory for the package
    fs.mkdirSync(libName);

    // 2. Create a package.json file
    fs.writeFileSync(
      `${libName}/package.json`,
      JSON.stringify(
        {
          name: libName,
          version: '0.1.0',
          description: 'A simple UI library generated by Skeletor.',
          main: 'index.ts',
          types: 'index.d.ts',
          scripts: {
            build: 'tsc',
            start: 'tsc -w',
          },
          author: 'skeletor-cli',
          license: 'UNLICENSED',
          dependencies: {
            react: '^17.0.2',
          },
          devDependencies: {
            typescript: '^4.3.5',
          },
        },
        null,
        2,
      ),
    );

    // 3. Create a tsconfig.json file
    fs.writeFileSync(
      `${libName}/tsconfig.json`,
      JSON.stringify(
        {
          compilerOptions: {
            target: 'es5',
            module: 'commonjs',
            lib: ['es6', 'dom'],
            declaration: true,
            outDir: 'dist',
            rootDir: 'src',
            strict: true,
            noImplicitAny: true,
            noImplicitThis: true,
            noImplicitReturns: true,
            noFallthroughCasesInSwitch: true,
            moduleResolution: 'node',
            esModuleInterop: true,
            forceConsistentCasingInFileNames: true,
            skipLibCheck: true,
            resolveJsonModule: true,
            isolatedModules: true,
            noEmit: true,
            jsx: 'react',
          },
          include: ['src/**/*'],
        },
        null,
        2,
      ),
    );

    // 4. Create a src directory
    fs.mkdirSync(`${libName}/src`);

    // 5. Create an index.ts file
    fs.writeFileSync(`${libName}/src/index.ts`, '');

    // 6. Create an index.d.ts file
    fs.writeFileSync(`${libName}/src/index.d.ts`, '');

    // 7. Create a README.md file
    fs.writeFileSync(
      `${libName}/README.md`,
      `# ${libName}

      A simple UI library generated by Skeletor.`,
    );

    // 8. Create a .gitignore file
    fs.writeFileSync(`${libName}/.gitignore`, 'node_modules');

    console.log('Package generated! ðŸŽ‰');
    console.log(`cd ${libName} && npm install`);

    updateSpinnerText(`cd ${libName} && npm install`);
    spinnerSuccess();
  });

const run = async () => {
  await program.parseAsync();
};

run();

process.on('unhandledRejection', function (err: Error) {
  const debug = program.opts().verbose;

  if (debug) {
    console.error(err.stack);
  }

  program.error('', { exitCode: 1 });
});
